package ca.csf.mobile2.tp2.question

import android.annotation.SuppressLint
import android.support.constraint.ConstraintLayout
import android.support.v7.app.AppCompatActivity
import android.util.Log
import android.view.View
import android.widget.*
import ca.csf.mobile2.tp2.R
import ca.csf.mobile2.tp2.databinding.ActivityQuestionBinding

import org.androidannotations.annotations.*

@SuppressLint("Registered") //Reason : Generated by Android Annotations
@DataBound
@EActivity(R.layout.activity_question)
class QuestionActivity : AppCompatActivity() {

    @Bean
    protected lateinit var questionService : QuestionService

    @InstanceState
    protected lateinit var viewModelAct: QuestionActivityViewModel

    protected fun onCreate(@BindingObject dataBinder : ActivityQuestionBinding) {
        if(!this::viewModelAct.isInitialized) {
            viewModelAct = QuestionActivityViewModel()
            getRandomQuestion()
        }

        dataBinder.viewModel = viewModelAct
    }

    private fun getRandomQuestion() {
        viewModelAct.activityState = QuestionActivityState.Loading

        questionService.getRandomQuestion(
            this::onQuestionFound,
            this::onConnectivityError,
            this::onServerError
        )
    }

    private fun sendAnswerQuestion(choice : Int) {

        questionService.sendAnswerQuestion(
            viewModelAct.question.id,
            "choose" + choice.toString(),
            this::onAnswerSend,
            this::onConnectivityError,
            this::onServerError
        )
    }

    @UiThread
    protected fun onQuestionFound(question : Question) {

        viewModelAct.question = question
        viewModelAct.activityState = QuestionActivityState.Question
    }

    @UiThread
    protected fun onAnswerSend() {
        viewModelAct.activityState = QuestionActivityState.Results
    }

    @UiThread
    protected fun onConnectivityError() {
        viewModelAct.activityState = QuestionActivityState.Error
        viewModelAct.isConnectivityError = true
    }

    protected fun onServerError() {
        viewModelAct.activityState = QuestionActivityState.Error
        viewModelAct.isConnectivityError = false
    }

    @Click(R.id.choice1_button)
    protected fun choice1ButtonButtonClicked() {

        sendAnswerQuestion(1)
    }

    @Click(R.id.choice2_button)
    protected fun choice2ButtonButtonClicked() {

        sendAnswerQuestion(2)
    }

    @Click(R.id.root_view)
    protected fun onScreenClick() {

        if(viewModelAct.activityState == QuestionActivityState.Results) {
            getRandomQuestion()
        }
    }

    @Click(R.id.retry_button)
    protected fun onRetryClick() {
        viewModelAct.activityState = QuestionActivityState.Loading

        getRandomQuestion()
    }
}
